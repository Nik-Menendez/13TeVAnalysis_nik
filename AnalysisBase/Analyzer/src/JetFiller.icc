#ifndef ANALYSISBASE_ANALYZER_JETFILLER_ICC
#define ANALYSISBASE_ANALYZER_JETFILLER_ICC

#include "AnalysisBase/Analyzer/interface/JetFiller.h"
#include "AnalysisTools/Utilities/interface/JetFlavorMatching.h"
#include "AnalysisTools/Utilities/interface/TopJetMatching.h"
#include "AnalysisTools/Utilities/interface/Types.h"

#include "AnalysisBase/Analyzer/interface/EventInfoFiller.h"
#include "AnalysisBase/Analyzer/interface/GenParticleFiller.h"
#include "AnalysisTools/JetShapeVariables/interface/QuarkGluonTagInterface.h"
#include "AnalysisTools/JetShapeVariables/interface/QuarkGluonTaggingVariables.h"

#include "DataFormats/Common/interface/ValueMap.h"

namespace ucsbsusy{

//--------------------------------------------------------------------------------------------------
template<typename Jet>
JetFiller<Jet>::JetFiller(const int options, const string branchName, const EventInfoFiller * evtInfoFiller, const GenParticleFiller * genParticleFiller
  , const edm::InputTag jetTag
  , const edm::InputTag reGenJetTag
  , const edm::InputTag stdGenJetTag
  , const edm::InputTag flvAssocTag
  , const bool   fillReGenJets
  , const double jptMin
) : BaseFiller(options, branchName), evtInfofiller_   (evtInfoFiller), genParticleFiller_(genParticleFiller)
  , jetTag_          (jetTag)
  , reGenJetTag_     (reGenJetTag)
  , stdGenJetTag_    (stdGenJetTag)
  , flvAssocTag_     (flvAssocTag)
  , qgTagQGL_        ("QGTagger", "qgLikelihood")
  , jptMin_          (jptMin)
  , fillReGenJets_   (fillReGenJets)
  , qglInterface_    (new QuarkGluonTagInterface)
  , qgTaggingVar_    (new QuarkGluonTaggingVariables)
  , jets_            (0)
  , reGenJets_       (0)
  , stdGenJets_      (0)
{
  if(!(options_ & LOADGEN) && (options & SAVETOPASSOC)){
    throw cms::Exception( "JetFiller::JetFiller()","You want to save the top tag assoc but not gen jets!");
  }


  ijetpt_     = data.addMulti<float>(branchName_,"jet_pt"    ,0);
  ijeteta_    = data.addMulti<float>(branchName_,"jet_eta"   ,0);
  ijetphi_    = data.addMulti<float>(branchName_,"jet_phi"   ,0);
  ijetmass_   = data.addMulti<float>(branchName_,"jet_mass"  ,0);
  ijetptraw_  = data.addMulti<float>(branchName_,"jet_ptraw" ,0);
  ijetpuId_   = data.addMulti<float>(branchName_,"jet_puId"  ,0);
  ijetcsv_    = data.addMulti<float>(branchName_,"jet_csv"   ,0);
  ijetarea_   = data.addMulti<float>(branchName_,"jet_area"  ,0);

  if(options_ & LOADGEN) {
    ijetgenindex_ = data.addMulti<int16  >(branchName_,"jet_genIndex",-1);
    igenjetpt_     = data.addMulti<float>(branchName_,"genjet_pt"    ,0);
    igenjeteta_    = data.addMulti<float>(branchName_,"genjet_eta"   ,0);
    igenjetphi_    = data.addMulti<float>(branchName_,"genjet_phi"   ,0);
    igenjetmass_   = data.addMulti<float>(branchName_,"genjet_mass"  ,0);
    igenjetflavor_ = data.addMulti<size8  >(branchName_,"genjet_flavor",0);

  }

  if(options_ & LOADJETSHAPE) {
    ijetbetaStar_=data.addMulti<float>(branchName_,"jet_betaStar",0);
    ijetqgl_     =data.addMulti<float>(branchName_,"jet_qgl"     ,0);
    ijetptD_     =data.addMulti<float>(branchName_,"jet_ptD"     ,0);
    ijetaxis1_   =data.addMulti<float>(branchName_,"jet_axis1"   ,0);
    ijetaxis2_   =data.addMulti<float>(branchName_,"jet_axis2"   ,0);
    ijetMult_    =data.addMulti<size16>(branchName_,"jet_jetMult" ,0);
    if(options_ & LOADGEN) {
      igenjetptD_  = data.addMulti<float>(branchName_,"genjet_ptD"    ,0);
      igenjetaxis1_= data.addMulti<float>(branchName_,"genjet_axis1"  ,0);
      igenjetaxis2_= data.addMulti<float>(branchName_,"genjet_axis2"  ,0);
      igenjetMult_ = data.addMulti<size16>(branchName_,"genjet_jetMult",0);
    }
  }

  if(options_ & SAVETOPASSOC) {
    iGenAssocPrtIndex_ = data.addMulti<size16>(branchName_,"prtassoc_partonIndex",0);
    iGenAssocJetIndex_ = data.addMulti<size16>(branchName_,"prtassoc_jetIndex",0);
    iGenAssocCont_     = data.addMulti<TopJetMatching::conType>(branchName_,"prtassoc_jetCont",0);
  }
}
//--------------------------------------------------------------------------------------------------
template<typename Jet>
void JetFiller<Jet>::load(const edm::Event& iEvent)
{
  reset();
  FileUtilities::enforceGet(iEvent,jetTag_,jets_,true);

  if(options_ & LOADGEN) {
    if(fillReGenJets_) FileUtilities::enforceGet(iEvent,reGenJetTag_,reGenJets_,true);
    else FileUtilities::enforceGet(iEvent,stdGenJetTag_,stdGenJets_,true);
    FileUtilities::enforceGet(iEvent,flvAssocTag_,flvAssoc_,true);
  }
  FileUtilities::enforceGet(iEvent,qgTagQGL_, qgHandleQGL_, true);

  isLoaded_ = true;

}

//--------------------------------------------------------------------------------------------------
template<typename Jet>
void JetFiller<Jet>::fill()
{
  vector<int> filledIndex;
  int curGenIndex = -1;
  if(options_ & LOADGEN){
    const reco::GenJetCollection& genJets = fillReGenJets_ ? (*reGenJets_.product()) : (*stdGenJets_.product());
    filledIndex.reserve(genJets.size());
    for(unsigned int iJ = 0; iJ < genJets.size(); ++iJ){
      const auto& j = genJets[iJ];
      if(j.pt() < jptMin_){ filledIndex.push_back(-1); continue;}
      filledIndex.push_back(++curGenIndex);
      data.fillMulti<float>(igenjetpt_    ,j.pt());
      data.fillMulti<float>(igenjeteta_   ,j.eta());
      data.fillMulti<float>(igenjetphi_   ,j.phi());
      data.fillMulti<float>(igenjetmass_  ,j.mass());
      data.fillMulti<size8>(igenjetflavor_,fillReGenJets_ ? flvAssoc_->at(iJ) : 0);
      if(options_ & LOADJETSHAPE){
        assert(evtInfofiller_->isLoaded());
        qgTaggingVar_->compute(&j);
        data.fillMulti<float>(igenjetptD_     ,qgTaggingVar_->getPtD());
        data.fillMulti<float>(igenjetaxis1_   ,qgTaggingVar_->getAxis1());
        data.fillMulti<float>(igenjetaxis2_   ,qgTaggingVar_->getAxis2());
        data.fillMulti<size16>(igenjetMult_   ,convertTo<size16>(qgTaggingVar_->getTotalMult(),"JetFiller::genJetMult"));
      }
    }

    if(options_ & SAVETOPASSOC) {
      const TopDecayMatching::Partons& partons = genParticleFiller_->getPartons(genJets);
      for(const auto p : partons){
        bool firstJet = true;
        for(const auto& ja : p.jetAssoc){
          //check to see if in the stored jet collection
          if(filledIndex[ja.first] < 0) continue;
          TopJetMatching::conType con = TopJetMatching::toContainmentType(ja.second.energy()/p.sumFinal.energy());
          //if the containment is less than 1% leave it off the list
          if(con == 0) continue;
          if(firstJet){
            //if the first jet of the parton tag it by making th containment negative
            con *= -1;
            //add the parton index
            data.fillMulti<size16>(iGenAssocPrtIndex_,convertTo<size16>(p.storedIndex,"JetFiller::prtassoc_partonIndex"));
            firstJet = false;
          }
          data.fillMulti<size16>(iGenAssocJetIndex_,convertTo<size16>(ja.first,"JetFiller::prtassoc_jetIndex"));
          data.fillMulti<TopJetMatching::conType>(iGenAssocCont_,con);
        }
      }
    }
  }





  for(unsigned int iJ = 0; iJ < jets_->size(); ++iJ){
    const Jet& j = jets_->at(iJ);
    if(j.pt() < jptMin_) continue;
    data.fillMulti<float>(ijetpt_   ,j.pt());
    data.fillMulti<float>(ijeteta_  ,j.eta());
    data.fillMulti<float>(ijetphi_  ,j.phi());
    data.fillMulti<float>(ijetmass_ ,j.mass());
    data.fillMulti<float>(ijetptraw_,getJecUncorrection(j));
    data.fillMulti<float>(ijetpuId_ ,getPUJetId(j));
    data.fillMulti<float>(ijetcsv_  ,getbDisc(j));
    data.fillMulti<float>(ijetarea_ ,j.jetArea());

    // for official qgTagger
    auto jet = jets_->begin(); jet += iJ;
    edm::RefToBase<Jet> jetRef(edm::Ref<vector<Jet>>(jets_, jet - jets_->begin()));
    float qgQGL = (*qgHandleQGL_ )[jetRef];
    data.fillMulti<float>(ijetqgl_ , qgQGL );

    if(options_ & LOADGEN) {
      const reco::GenJetRef gJ = fillReGenJets_ ? getReGenJet(j,iJ) : getStdGenJet(j);
      if(gJ.isNonnull()) {
        data.fillMulti<int16>(ijetgenindex_,convertTo<int16>(filledIndex[gJ.key()],"JetFiller::genJetIndex"));
      } else {
        data.fillMulti<int16>(ijetgenindex_   );
      }
    }

    if(options_ & LOADJETSHAPE){
      assert(evtInfofiller_->isLoaded());
      //data.fillMulti<float>(ijetqgl_,getQGDisc(j));
      qgTaggingVar_->compute(&j);
      data.fillMulti<float>(ijetbetaStar_,getBetaStar(j));
      data.fillMulti<float>(ijetptD_     ,qgTaggingVar_->getPtD());
      data.fillMulti<float>(ijetaxis1_   ,qgTaggingVar_->getAxis1());
      data.fillMulti<float>(ijetaxis2_   ,qgTaggingVar_->getAxis2());
      data.fillMulti<size16>(ijetMult_   ,convertTo<size16>(qgTaggingVar_->getTotalMult(),"JetFiller::recoJetMult"));
    }

  }

  isFilled_ = true;
}
}

#endif
