
#ifndef ANALYSISTOOLS_KINEMATICVARIABLES_JETKINEMATICS_ICC
#define ANALYSISTOOLS_KINEMATICVARIABLES_JETKINEMATICS_ICC


#include <vector>
#include <utility>

#include "AnalysisTools/KinematicVariables/interface/JetKinematics.h"
#include "AnalysisTools/Utilities/interface/PhysicsUtilities.h"
#include "AnalysisTools/Utilities/interface/StatHelper.h"

using namespace ucsbsusy;


//_____________________________________________________________________________
template<typename Jet>
Jet JetKinematics::mht(const vector<Jet*>& jets, const double minPT, const double maxEta, const vector<bool>* selected)
{
  const size                    numJets = jets.size();
  Jet mht;
  for (size iJet = 0; iJet < numJets; ++iJet) {
    const Jet&             jet     = (*jets[iJet]);
    if (selected && !(*selected)[iJet]) continue;
    if (!passCuts(jet,minPT,maxEta)) continue;
    mht.p4() = mht.p4() - jet.p4();
  } // end loop over jets
  return mht;
}

//_____________________________________________________________________________
template<typename Jet>
double JetKinematics::ht(const vector<Jet*>& jets, const double minPT, const double maxEta, const vector<bool>* selected)
{
  const size                    numJets = jets.size();
  double                        ht      = 0;
  for (size iJet = 0; iJet < numJets; ++iJet) {
    const Jet&             jet     = (*jets[iJet]);
    if (selected && !(*selected)[iJet]) continue;
    if (!passCuts(jet,minPT,maxEta)) continue;
    ht                         += jet.pt();
  } // end loop over jets
  return ht;
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::absDPhiMETJ(const MET& met, const Jet& jet, const double minPT, const double maxEta)
{
  if (!passCuts(jet,minPT,maxEta)) return noDist;
  return PhysicsUtilities::absDeltaPhi(met,jet);
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::absDPhiMETJ(const MET& met, const Jet& jet, const double minPT, const double maxEta)
{
  if (!passCuts(jet,minPT,maxEta)) return noDist;
  return fabs(PhysicsUtilities::deltaPhi(jet, met));
}

//____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::absDPhiStarMETJ(const MET& met, const Jet& jet, const double minPT, const double maxEta){
	if (!passCuts(jet,minPT,maxEta)) return noDist;
	double_t met_double = static_cast<double_t> (met.pt());
  	double fScaling = fabs(jet.pt())/fabs(met_double);
	double cosDphiStar = (fScaling + TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)))/TMath::Sqrt(1 + fScaling*fScaling + 2*fScaling*TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)));
	return TMath::ACos(cosDphiStar);
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::absDPhiStarMETJ_tilde(const MET& met, const Jet& jet, const double minPT, const double maxEta)
{
  if (!passCuts(jet,minPT,maxEta)) return noDist;
  double_t met_double = static_cast<double_t> (met.pt());
  double fScaling = fabs(jet.pt())/fabs(met_double);
  double gScaling = 0;
  if(fScaling + TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)) >= 0)
    gScaling = TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta));
  else
    gScaling = -fScaling;
  double TanDPhiStar = 0; 
  if(fScaling + TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)) >= 0)
    TanDPhiStar = TMath::Sin(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta))/(fScaling + gScaling);
  else
    TanDPhiStar = TMath::Sqrt(1 + fScaling*fScaling + 2*fScaling*TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)))/(fScaling + gScaling);
  return TMath::ATan(TanDPhiStar);
  //return fabs(PhysicsUtilities::deltaPhi(jet, met + jet));
}

//___________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::OmegaMETJ(const MET& met, const Jet& jet, const double minPT, const double maxEta)
{
  if (!passCuts(jet,minPT,maxEta)) return noDist;
  double_t met_double = static_cast<double> (met.pt());
  double fScaling = fabs(jet.pt())/fabs(met_double);
  double tanOmega = TMath::Sin(JetKinematics::absDPhiMETJ(met, jet, minPT, maxEta))/fScaling;
  return TMath::ATan(tanOmega);
}

//____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::OmegaMETJ_tilde(const MET& met, const Jet& jet, const double minPT, const double maxEta)
{
  if (!passCuts(jet,minPT,maxEta)) return noDist;
  double_t met_double = static_cast<double> (met.pt());
  double fScaling = fabs(jet.pt())/fabs(met_double);
  double tanOmega = 0;
  if(fScaling + TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)) >= 0)
    tanOmega = TMath::Sin(JetKinematics::absDPhiMETJ(met, jet, minPT, maxEta))/fScaling;
  else
    tanOmega = TMath::Sqrt(1 + fScaling*fScaling + 2*fScaling*TMath::Cos(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta)))/fScaling;
  return TMath::ATan(tanOmega);
} 

//____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::ChiMETJ(const MET& met, const Jet& jet, const double minPT, const double maxEta)
{
  if (!passCuts(jet,minPT,maxEta)) return noDist;
  double Chi = 0;
  if(JetKinematics::absDPhiMETJ(met,jet,minPT,maxEta) <= TMath::PiOver2())
    Chi = JetKinematics::OmegaMETJ(met,jet,minPT,maxEta);
  else if(JetKinematics::absDPhiStarMETJ(met,jet,minPT,maxEta) <= TMath::PiOver2())
    Chi = JetKinematics::absDPhiStarMETJ(met,jet,minPT,maxEta);
  else
    Chi = TMath::PiOver2();
  return Chi;
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::absDPhiMETJ12(const MET& met, const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  const size                    numJets = jets.size();
  return min( (numJets > 0 ? absDPhiMETJ(met,*jets[0],minPT,maxEta) : noDist )
            , (numJets > 1 ? absDPhiMETJ(met,*jets[1],minPT,maxEta) : noDist )
            );
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::absDPhiMETJ3(const MET& met, const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  return (jets.size() > 2 ? absDPhiMETJ(met,*jets[2],minPT,maxEta) : noDist );
}

//_____________________________________________________________________________
template<typename Momentum1, typename Momentum2>
double JetKinematics::transverseMass(const Momentum1& visible, const Momentum2& invisible)
{
  const double    cosDPhi   = TMath::Cos( PhysicsUtilities::deltaPhi(visible.phi(), invisible.phi()) );
  return TMath::Sqrt( 2 * visible.pt() * invisible.pt() * (1 - cosDPhi) );
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::htAlongHtAway(const MET& met, const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  double htAlong = 0;
  double htAway  = 0;
  for(const auto* jet : jets ){
    if (!passCuts(*jet,minPT,maxEta)) continue;
    const double            dPhi            = PhysicsUtilities::absDeltaPhi(*jet,met);

    if (dPhi < TMath::PiOver2()) {
      htAlong              += jet->pt();
    } else {
      htAway               += jet->pt();
    }
  }

  return htAway == 0 ? 1000 : htAlong        /htAway;
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::htAlong(const MET& met, const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  double htAlong = 0;
  for(const auto* jet : jets ){
    if (!passCuts(*jet,minPT,maxEta)) continue;
    const double            dPhi            = PhysicsUtilities::absDeltaPhi(*jet,met);

    if (dPhi < TMath::PiOver2()) {
      htAlong              += jet->pt();
    }
  }

  return htAlong;
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::htAway(const MET& met, const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  double htAway = 0;
  for(const auto* jet : jets ){
    if (!passCuts(*jet,minPT,maxEta)) continue;
    const double            dPhi            = PhysicsUtilities::absDeltaPhi(*jet,met);

    if (dPhi >= TMath::PiOver2()) {
      htAway              += jet->pt();
    }
  }

  return htAway;
}

//_____________________________________________________________________________
template<typename Jet>
double JetKinematics::ptRMS(const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  StatHelper               ptStats;
  for(const auto* jet : jets ){
    if (!passCuts(*jet,minPT,maxEta)) continue;
    ptStats.add(jet->pt());
  }
  return ptStats.getRMS();
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::deltaPhiMETRMS(const MET& met, const std::vector<Jet*>& jets, const double minPT, const double maxEta)
{
  StatHelper               dPhiAwayStats;
  const float              oppositePhi     = TVector2::Phi_mpi_pi( met.phi() + TMath::Pi() );
  for(const auto* jet : jets ){
    if (!passCuts(*jet,minPT,maxEta)) continue;
    dPhiAwayStats  .add(PhysicsUtilities::deltaPhi(jet->phi(), oppositePhi  ),jet->pt());  }
  return dPhiAwayStats.getRMS();
}

//_____________________________________________________________________________
template<typename Jet>
double JetKinematics::bJetInvMass(const std::vector<Jet*>& jets, bool (*isBJet)(const Jet&), const double minPT, const double maxEta){
  int leadBInd = -1;
  int secBInd  = -1;
  for(unsigned int iJ = 0; iJ < jets.size(); ++iJ){
    const Jet& jet = *jets[iJ];
    if (!passCuts(jet,minPT,maxEta)) continue;
    if (!isBJet(jet)) continue;
    if(leadBInd == -1)
      leadBInd = iJ;
    else{
      secBInd = iJ;
      break;
    }
  }
  return secBInd >= 0 ? (jets[leadBInd]->p4() + jets[secBInd]->p4()).mass() : 0;
}

//_____________________________________________________________________________
template<typename MET,typename Jet>
double JetKinematics::bJetTranverseMass(const MET& met, const std::vector<Jet*>& jets, bool (*isBJet)(const Jet&), const double minPT, const double maxEta)
{
  double minDPhiMediumB  = 1e308;
  int    nearBInd        = -1;
  for(unsigned int iJ = 0; iJ < jets.size(); ++iJ){
    const Jet& jet = *jets[iJ];
    if (!passCuts(jet,minPT,maxEta)) continue;
    if (!isBJet(jet)) continue;
    const double            dPhi            = PhysicsUtilities::absDeltaPhi(jet,met);
    if(dPhi < minDPhiMediumB){
      minDPhiMediumB              = dPhi;
      nearBInd               = iJ;
    }
  }
  return nearBInd >= 0 ? transverseMass(*jets[nearBInd], met) : 0;
}

//_____________________________________________________________________________
template<typename Jet>
double JetKinematics::deltaEtaBJetRMS(const std::vector<Jet*>& jets, bool (*isBJet)(const Jet&), const double minPT, const double maxEta)
{
  int leadBInd = -1;
  for(unsigned int iJ = 0; iJ < jets.size(); ++iJ){
    const Jet& jet = *jets[iJ];
    if (!passCuts(jet,minPT,maxEta)) continue;
    if (!isBJet(jet)) continue;
    leadBInd = iJ;
    break;
  }
  if(leadBInd == -1) return 0;

  StatHelper               JB_DETAStats      ;
  for(unsigned int iJ = 0; iJ < jets.size(); ++iJ){
    if(leadBInd == int(iJ)) continue;
    const Jet& jet = *jets[iJ];
    if (!passCuts(jet,minPT,maxEta)) continue;
    JB_DETAStats.add(PhysicsUtilities::deltaEta(jet,*jets[leadBInd]),jet.pt());
  }
  return JB_DETAStats.getRMS();
}

//_____________________________________________________________________________
template<typename Jet>
double JetKinematics::highestPTJetPair(const std::vector<Jet*>& jets, const double minPT, const double maxEta){
  class WSorting {
  public:

    int jet1Ind;
    int jet2Ind;
    int PTInd;
    int DRInd;
    double pT;
    double DR;
    double mass;

    static bool drSort(const WSorting& a, const WSorting& b){
      return a.DR < b.DR;
    }
    static bool ptSort(const WSorting& a, const WSorting& b){
      return a.pT > b.pT;
    }

    static bool wSort(const WSorting& a, const WSorting& b){
      return TMath::Abs(a.mass - 80.4) < TMath::Abs(b.mass - 80.4);
    }
  };

  vector<const Jet*> sortJets;
  for(const auto* jet : jets ){
    if (!passCuts(*jet,minPT,maxEta)) continue;
    sortJets.push_back(jet);
  }

  vector<WSorting> allJetCombos;
  allJetCombos.reserve((sortJets.size()*sortJets.size() - sortJets.size())/2);
  vector<bool> finalMatched(sortJets.size(),false);
  for (size iJ = 0; iJ < sortJets.size(); ++iJ) {
    const Jet & jet = (*sortJets[iJ]);

    for (size iJ2 = iJ + 1; iJ2 < sortJets.size(); ++iJ2) {
      const Jet & jet2 = (*sortJets[iJ2]);

      WSorting wSort;
      wSort.jet1Ind = iJ;
      wSort.jet2Ind = iJ2;
      wSort.pT = (jet2.p4() + jet.p4()).pt();
      wSort.DR = PhysicsUtilities::deltaR(jet,jet2);
      wSort.mass = (jet2.p4() + jet.p4()).mass();
      allJetCombos.push_back(wSort);
    }
  }

  sort(allJetCombos.begin(),allJetCombos.end(),WSorting::drSort);

  vector< WSorting > finalCombos;
  finalCombos.reserve(ceil(double(sortJets.size())/2));
  for(unsigned int iP = 0; iP < allJetCombos.size(); ++iP){
    if(!finalMatched[allJetCombos[iP].jet1Ind]  && !finalMatched[allJetCombos[iP].jet2Ind] ){
      finalCombos.push_back(allJetCombos[iP]);
      finalMatched[allJetCombos[iP].jet1Ind] = true;
      finalMatched[allJetCombos[iP].jet2Ind] = true;
    }
  }
  sort(finalCombos.begin(),finalCombos.end(),WSorting::ptSort);
  return finalCombos.size() > 0 ? finalCombos[0].mass : 0;
}

//_____________________________________________________________________________
template<typename Jet>
inline bool JetKinematics::passCuts(const Jet& jet,const double minPT, const double maxEta)
{
  if (jet.pt()              < minPT ) return false;
  if (TMath::Abs(jet.eta()) > maxEta) return false;
  return true;
}


#endif //ANALYSISTOOLS_KINEMATICVARIABLES_JETKINEMATICS_ICC

