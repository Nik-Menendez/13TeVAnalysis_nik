/**
  @file         ParticleInfo.icc
*/


#ifndef PARTICLEINFO_ICC
#define PARTICLEINFO_ICC

#include "AnalysisTools/Utilities/interface/ParticleInfo.h"
#include <iostream>
#include <iomanip>
#include <cmath>

template<typename Particle>
bool ParticleInfo::isA(int particleID, const Particle* p, bool checkCharge)
{
  int id = p->pdgId();
  if(checkCharge) return (id == particleID);

  return (std::fabs(id) == particleID);
}
//_____________________________________________________________________________
template<typename Object>
TString ParticleInfo::nameFor(const Object& object)
{
  return nameFor(object.pdgId());
}
//_____________________________________________________________________________
template<typename Object>
TString ParticleInfo::titleFor(const Object& object)
{
  return titleFor(object.pdgId());
}
//_____________________________________________________________________________
template<typename Particle>
std::ostream& ParticleInfo::printGenHistory(const std::vector<Particle>& genParticles, const unsigned int particleIndex)
{
  const Particle&      particle        = genParticles[particleIndex];
  if      (particle.numberOfMothers() == 1)
    printGenHistory(genParticles, particle.motherRef().key());
  else if (particle.numberOfMothers()  > 1)
    std::cout  << "...";
  std::cout    << " -> " << particleIndex << ":" << ParticleInfo::titleFor(particle.pdgId());
  return std::cout;
}

//_____________________________________________________________________________
template<typename Particle>
void ParticleInfo::printGenInfo(const std::vector<Particle>& genParticles, int genBound, int genStart)
{
  using namespace std;

  cout    << right << setw(6) << "#" << " " << setw(10) << "pdgId" << "  " << left << setw(20) << "Name"
          << "  " << "Chg" << "  " << setw(10) << "Mass" << "  " << setw(48) << " Momentum"
          << left << "  " << setw(10) << "Mothers" << " " << setw(30) << "Daughters" << endl;
  if (genBound < 0)             genBound        =            static_cast<int>(genParticles.size());
  else                          genBound        = TMath::Min(static_cast<int>(genParticles.size()), genBound);

  if (genStart < 0)             genStart        =            0;

  for (int iGen = genStart; iGen < genBound; ++iGen) {
    printGenParticleInfo(genParticles[iGen], iGen);
  }
  cout << setfill('-') << setw(150) << "" << setfill(' ') << endl;
}
//_____________________________________________________________________________
template<typename Particle>
void ParticleInfo::printGenParticleInfo(const Particle* genParticle, const int idx){
  using namespace std;
  cout  << right << setw(3) << genParticle->status();
  cout  << right << setw(3) << idx << " " << setw(10) << genParticle->pdgId() << "  ";
  cout  << left << setw(20) << ParticleInfo::titleFor(genParticle->pdgId());
  cout  << right << "  " << setw(3) << genParticle->charge() << "  " << TString::Format("%10.3g", genParticle->mass() < 1e-5 ? 0 : genParticle->mass());
  cout  << left << setw(50) << TString::Format("  (E=%6.4g pT=%6.4g eta=%7.3g phi=%7.3g)", genParticle->energy(), genParticle->pt(), genParticle->eta(), genParticle->phi());

  TString                     mothers;
  for (unsigned int iMom = 0; iMom < genParticle->numberOfMothers(); ++iMom) {
    if (mothers.Length())     mothers        += ",";
    mothers   += genParticle->motherRef(iMom).key();
  }
  cout << "  " << setw(10) << mothers;
  TString                     daughters;
  for (unsigned int iDau = 0; iDau < genParticle->numberOfDaughters(); ++iDau) {
    if (daughters.Length())   daughters      += ",";
    daughters += genParticle->daughterRef(iDau).key();
  }
  cout << " " << setw(30) << daughters << endl;
}

//_____________________________________________________________________________
template<typename Particle>
void ParticleInfo::printGenParticleInfo(const Particle& genParticle, const int idx){
  printGenParticleInfo(&genParticle, idx);
}
//_____________________________________________________________________________
template<typename Particle>
void ParticleInfo::printPackedGenInfo(const std::vector<Particle>& genParticles, int genBound, int genStart)
{
  using namespace std;

  cout    << right << setw(6) << "#" << " " << setw(10) << "pdgId" << "  " << left << setw(20) << "Name"
          << "  " << "Chg" << "  " << setw(10) << "Mass" << "  " << setw(48) << " Momentum"
          << left << "  " << setw(10) << "Mothers" << " " << setw(30) << "Daughters" << endl;
  if (genBound < 0)             genBound        =            static_cast<int>(genParticles.size());
  else                          genBound        = TMath::Min(static_cast<int>(genParticles.size()), genBound);

  if (genStart < 0)             genStart        =            0;

  for (int iGen = genStart; iGen < genBound; ++iGen) {
    printPackedGenParticleInfo(genParticles[iGen], iGen);
  }
  cout << setfill('-') << setw(150) << "" << setfill(' ') << endl;
}
//_____________________________________________________________________________
template<typename Particle>
void ParticleInfo::printPackedGenParticleInfo(const Particle* genParticle, const int idx){
  using namespace std;
  cout  << right << setw(3) << genParticle->status();
  cout  << right << setw(3) << idx << " " << setw(10) << genParticle->pdgId() << "  ";
  cout  << left << setw(20) << ParticleInfo::titleFor(genParticle->pdgId());
  cout  << right << "  " << setw(3) << genParticle->charge() << "  " << TString::Format("%10.3g", genParticle->mass() < 1e-5 ? 0 : genParticle->mass());
  cout  << left << setw(50) << TString::Format("  (E=%6.4g pT=%6.4g eta=%7.3g phi=%7.3g)", genParticle->energy(), genParticle->pt(), genParticle->eta(), genParticle->phi());

  TString                     mothers;
  for (unsigned int iMom = 0; iMom < genParticle->numberOfMothers(); ++iMom) {
    if (mothers.Length())     mothers        += ",";
    mothers   += genParticle->motherRef().key();
  }
  cout << "  " << setw(10) << mothers<<endl;
}

//_____________________________________________________________________________
template<typename Particle>
void ParticleInfo::printPackedGenParticleInfo(const Particle& genParticle, const int idx){
  printPackedGenParticleInfo(&genParticle, idx);
}

#endif //PARTICLEINFO_ICC
