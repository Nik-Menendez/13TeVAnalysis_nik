/**
  @file         ParticleInfo.icc
*/


#ifndef PARTICLEUTILITIES_ICC
#define PARTICLEUTILITIES_ICC

#include <algorithm>

#include "FWCore/Utilities/interface/Exception.h"
#include "AnalysisTools/Utilities/interface/ParticleUtilities.h"

//_____________________________________________________________________________
template<typename ParticleA, typename ParticleB>
bool ParticleUtilities::isAncestor(const ParticleA* ancestor, const ParticleB* particle)
{
  //particle is already the ancestor
  if(ancestor == particle) return true;
  //otherwise loop on mothers, if any and return true if the ancestor is found
  for(size_t i=0; i<particle->numberOfMothers(); i++) {
    if(isAncestor(ancestor,particle->mother(i))) return true;
  }
  //if we did not return yet, then particle and ancestor are not relatives
  return false;
}

//_____________________________________________________________________________
template<typename Particle>
bool ParticleUtilities::isOutgoing(const Particle* particle)
{
  if (particle->status() != ParticleInfo::status_doc)   return false;
  for (unsigned int iDau = 0; iDau < particle->numberOfDaughters(); ++iDau)
    if (particle->daughter(iDau)->status() == ParticleInfo::status_doc)
      return false;
  return true;
}

//_____________________________________________________________________________
template<typename Particle>
const Particle* ParticleUtilities::getOriginal(const Particle* particle)
{
  if (!particle)          return 0;
  const Particle*         original  = particle;
  while (original->numberOfMothers() > 0 && original->mother(0)->pdgId() == particle->pdgId())
    original  = dynamic_cast<const Particle*>(original->mother(0));
  return original;
}
//_____________________________________________________________________________
template<typename ParticleRef, typename Container>
ParticleRef ParticleUtilities::getOriginal(ParticleRef particle, const Container& particles)
{
  if (particle.isNull())  return particle;
  assert(particle.id() == particles.id());

  while (particle->numberOfMothers() > 0 && particle->mother(0)->pdgId() == particle->pdgId())
    particle   = ParticleRef(particles, particle->motherRef(0).key());
  return particle;
}
//_____________________________________________________________________________
template<typename Particle>
const Particle* ParticleUtilities::getFinal(const Particle* particle, int maxNumDaughters)
{
  if (!particle)          return 0;
  const Particle*         final     = particle;
  while (const unsigned numDaughters = final->numberOfDaughters()) {
    if (maxNumDaughters > 0 && int(numDaughters) > maxNumDaughters)
      break;

    const Particle*       chain     = 0;
    for (unsigned iDau = 0; iDau < numDaughters; ++iDau)
      if (final->daughter(iDau)->pdgId() == particle->pdgId()) {
        chain = dynamic_cast<const Particle*>(final->daughter(iDau));
        break;
      }
    if (chain == 0)       break;
    final                 = chain;
  }

  return final;
}
//_____________________________________________________________________________
template<typename ParticleRef, typename Container>
ParticleRef ParticleUtilities::getFinal(ParticleRef particle, const Container& particles, int maxNumDaughters)
{
  assert(particle.isNonnull());
  assert(particle.id() == particles.id());

  while (const unsigned numDaughters = particle->numberOfDaughters()) {
    if (maxNumDaughters > 0 && int(numDaughters) > maxNumDaughters)
      break;

    ParticleRef           chain;
    for (unsigned iDau = 0; iDau < numDaughters; ++iDau)
      if (particle->daughter(iDau)->pdgId() == particle->pdgId()) {
        chain = ParticleRef(particles, particle->daughterRef(iDau).key());
        break;
      }
    if (chain.isNull())   break;
    particle              = chain;
  }

  return particle;
}
//_____________________________________________________________________________
template<typename Particle, typename OutParticle>
int ParticleUtilities::getOutgoing(const Particle* particle, std::vector<OutParticle>& output, bool (*vetoID)(int))
{
  if (isOutgoing(particle)) {
    if (!vetoID || !(*vetoID)(particle->pdgId())) {
      output.push_back(dynamic_cast<OutParticle>( particle ));
      if (output.back() == 0)
        throw cms::Exception("ParticleUtilities::getOutgoing()", "Incorrect type to put into container.");
    }
    return 1;
  }

  int           count   = 0;
  for (unsigned int iDau = 0; iDau < particle->numberOfDaughters(); ++iDau)
    count      += getOutgoing(particle->daughter(iDau), output, vetoID);
  return count;
}
//_____________________________________________________________________________
template<typename Particle, typename OutParticle>
int ParticleUtilities::getDecayProducts(const Particle* particle, std::vector<OutParticle>& output, bool (*vetoID)(int), std::vector<OutParticle>* vetoed)
{
  assert(particle);
  
  if (ParticleInfo::isDecayProduct(particle->pdgId())) {
    if (!vetoID || !(*vetoID)(particle->pdgId())) {
      output.push_back(dynamic_cast<OutParticle>( ParticleUtilities::getFinal(particle) ));
      if (output.back() == 0)
        throw cms::Exception("ParticleUtilities::getDecayProducts()", "Incorrect type to put into container.");
    }
    else if (vetoed)
      vetoed->push_back(dynamic_cast<OutParticle>( ParticleUtilities::getFinal(particle) ));
    return 1;
  }
  
  assert(TMath::Abs(particle->pdgId()) < ParticleInfo::p_cluster);
  assert(particle->numberOfDaughters() > 1);

  bool                hasDocumented = false;
  for (unsigned int iDau = 0; iDau < particle->numberOfDaughters(); ++iDau)
    if ( particle->daughter(iDau)->pdgId () != particle->pdgId() 
      && particle->daughter(iDau)->status() == ParticleInfo::status_doc
       ) {
      hasDocumented   = true;
      break;
    }

  int                 totalProducts = 0;
  int                 numDecays     = 0;
  for (unsigned int iDau = 0; iDau < particle->numberOfDaughters(); ++iDau) {
    if (hasDocumented && (particle->daughter(iDau)->status() != ParticleInfo::status_doc))  continue;

    const int         daughterID    = particle->daughter(iDau)->pdgId();
    if (daughterID == particle->pdgId())  continue;
    if (TMath::Abs(daughterID) == ParticleInfo::p_g)    continue;
      
    ++numDecays;
    totalProducts    += getDecayProducts(particle->daughter(iDau), output, vetoID, vetoed);
  } // end loop over daughters

  if (numDecays != 2 && (TMath::Abs(particle->pdgId()) != ParticleInfo::p_Z0 || numDecays != 4))
    throw cms::Exception( "ParticleUtilities::getDecayProducts()"
                        , TString::Format ( "Unexpected number of decay products %s -> %d -->>> %d."
                                          , ParticleInfo::nameFor(*particle).Data()
                                          , numDecays
                                          , totalProducts
                                          ).Data()
                        );

  return totalProducts;
}
//_____________________________________________________________________________
template<typename Particle>
bool ParticleUtilities::isLastInChain(const Particle* particle)
{
  for (unsigned int iDau = 0; iDau < particle->numberOfDaughters(); ++iDau)
    if (particle->daughter(iDau)->pdgId() == particle->pdgId())
      return false;
  return true;
}
//______________________________________________________________________________
template<typename Particle>
std::vector<const Particle*> ParticleUtilities::getProgenitors(const std::vector<Particle>& particles)
{
  std::vector<const Particle*>      progenitors;
  for (unsigned iGen = 6; iGen < particles.size(); ++iGen) {
    const Particle&                 particle  = particles[iGen];
    if (particle.numberOfMothers() != 2)                break;
    if (particle.status() != ParticleInfo::status_doc)  break;
    assert(particle.motherRef(0).key() == 4 || particle.motherRef(0).key() == 5);
    assert(particle.motherRef(1).key() == 4 || particle.motherRef(1).key() == 5);

    const int                       pdgId     = TMath::Abs(particle.pdgId());
    if (pdgId == ParticleInfo::p_t || pdgId == ParticleInfo::p_Z0 || pdgId == ParticleInfo::p_Wplus || pdgId == ParticleInfo::p_h0)
      progenitors.push_back(ParticleUtilities::getFinal(&particle, 1));
  } // end loop over particles

  static const LesserIDorGreaterPT  COMPARATOR;
  std::sort(progenitors.begin(), progenitors.end(), COMPARATOR);

  return progenitors;
}
//_____________________________________________________________________________
template<typename Particle>
std::vector<const Particle*> ParticleUtilities::getDecayProducts(const std::vector<const Particle*>& progenitors)
{
  std::vector<const Particle*>      decayProducts;
  decayProducts.clear  ();
  decayProducts.reserve(3*progenitors.size());

  for (unsigned iProgen = 0; iProgen < progenitors.size(); ++iProgen)
    ParticleUtilities::getDecayProducts(progenitors[iProgen], decayProducts);

  return decayProducts;
}
//______________________________________________________________________________
template<typename Particle>
TString ParticleUtilities::classifyInitialFlavors(const std::vector<Particle>& genParticles)
{
  std::vector<int>              numInitFlavors(ParticleInfo::numJetFlavors+1, 0);
  ++( numInitFlavors[jetFlavor(genParticles[2].pdgId())] );
  ++( numInitFlavors[jetFlavor(genParticles[3].pdgId())] );
  return ParticleInfo::formatFlavors(numInitFlavors);
}
//______________________________________________________________________________
template<typename Particle>
TString ParticleUtilities::classifyIncomingFlavors(const std::vector<Particle>& genParticles)
{
  std::vector<int>              numInFlavors  (ParticleInfo::numJetFlavors+1, 0);
  ++( numInFlavors  [jetFlavor(genParticles[4].pdgId())] );
  ++( numInFlavors  [jetFlavor(genParticles[5].pdgId())] );
  return ParticleInfo::formatFlavors(numInFlavors);
}
//______________________________________________________________________________
template<typename Particle>
TString ParticleUtilities::classifyOutgoingFlavors(const std::vector<Particle>& genParticles, const std::vector<int>& mePartonIndex, const unsigned int numMEPartons)
{
  std::vector<int>              numOutFlavors (ParticleInfo::numJetFlavors+1, 0);
  for (unsigned int iME = 0; iME < numMEPartons; ++iME) {
    const Particle&             parton        = genParticles[mePartonIndex[iME]];
    ++( numOutFlavors[jetFlavor(parton.pdgId())] );
  } // end loop over ME partons
  return ParticleInfo::formatFlavors(numOutFlavors);
}
//______________________________________________________________________________
template<typename Particle>
TString ParticleUtilities::classifyProduction(const std::vector<Particle>& genParticles, ParticleInfo::JetFlavor special)
{
  ParticleInfo::JetFlavor                     init1         = jetFlavor(genParticles[2].pdgId());
  ParticleInfo::JetFlavor                     init2         = jetFlavor(genParticles[3].pdgId());
  ParticleInfo::JetFlavor                     incoming1     = jetFlavor(genParticles[4].pdgId());
  ParticleInfo::JetFlavor                     incoming2     = jetFlavor(genParticles[5].pdgId());
  //if ((init1!=incoming1 && (init1!=g_jet)==(incoming1!=g_jet)) || (init2!=incoming2 && (init2!=g_jet)==(incoming2!=g_jet)))
  //  return "";
  if (init2 < init1) {
    std::swap(init1    , init2    );
    std::swap(incoming1, incoming2);
  }
  TString                       sInit1        = specialJetFlavor(init1    ,special);
  TString                       sInit2        = specialJetFlavor(init2    ,special);
  TString                       sIncoming1    = specialJetFlavor(incoming1,special);
  TString                       sIncoming2    = specialJetFlavor(incoming2,special);
  TString                       production    = sInit1 + sInit2;
  if ((sInit1 != sIncoming1 || sInit2 != sIncoming2) && (init1==special || init2==special || incoming1==special || incoming2==special))
    production                 += "_to_" + sIncoming1 + sIncoming2;
  else  production             += "_to_dotdotdot";
  production                   += "_to_X_";
  return production;
}
//______________________________________________________________________________
template<typename Particle>
int ParticleUtilities::countWithStatus(const std::vector<Particle>& particles, int status, bool (*test)(int), bool shortCircuit)
{
  int                       count     = 0;
  for (unsigned int iPtcl = 0; iPtcl < particles.size(); ++iPtcl) {
    const Particle&         particle  = particles[iPtcl];
    if (particle.status() == status) {
      if (!test || (*test)(particle.pdgId())) {
        ++count;
        if (shortCircuit)   break;
      }
    }
  } // end loop over particles
  return count;
}
//______________________________________________________________________________
template<typename Particle>
int ParticleUtilities::countWithID(const std::vector<Particle>& particles, int pdgId, int status, bool checkCharge, bool shortCircuit)
{
  int                       count     = 0;
  for (unsigned int iPtcl = 0; iPtcl < particles.size(); ++iPtcl) {
    const Particle&         particle  = particles[iPtcl];
    if (status >= 0 && particle.status() != status)   continue;
    if ( checkCharge
       ? (            particle.pdgId()  == pdgId )
       : ( TMath::Abs(particle.pdgId()) == TMath::Abs(pdgId) )
       ) {
      ++count;
      if (shortCircuit)     break;
    }
  } // end loop over particles
  return count;
}
//______________________________________________________________________________
template<typename Particle>
int ParticleUtilities::countProducedID(const std::vector<Particle>& particles, int pdgId, bool checkCharge, bool shortCircuit, unsigned int firstProduced, unsigned int minNumParents)
{
  int                       count     = 0;
  for (unsigned int iPtcl = firstProduced; iPtcl < particles.size(); ++iPtcl) {
    const Particle&         particle  = particles[iPtcl];
    if (particle.status()          != ParticleInfo::status_doc   )  break;
    if (particle.numberOfMothers() <  minNumParents)  break;
    if ( checkCharge
       ? (            particle.pdgId()  == pdgId )
       : ( TMath::Abs(particle.pdgId()) == TMath::Abs(pdgId) )
       ) {
      ++count;
      if (shortCircuit)     break;
    }
  } // end loop over particles

  return count;
}
#endif //PARTICLEINFO_ICC
