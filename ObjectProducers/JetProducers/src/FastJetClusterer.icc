#include "ObjectProducers/JetProducers/interface/FastJetClusterer.h"
#include "RecoJets/JetProducers/interface/JetSpecific.h"
#include "AnalysisTools/Utilities/interface/PhysicsUtilities.h"



#define _DEBUG_MODE_  if (0)
//#define _DEBUG_MODE_  if (1)
#define _DEBUG_OUT_   _DEBUG_MODE_  std::cout


#include <TString.h>
namespace ucsbsusy {
/*************************/
/*      Interface        */
/*************************/

//_____________________________________________________________________________
template<typename Particle>
void FastJetClusterer::addParticles(const edm::Handle<std::vector<Particle> >& inputParticles, PRTTYPE type, int status, double minInputPT, double maxInputEta, bool (*select)(const Particle&), std::vector<bool>* vetoes, double scale)
{
  particles.reserve(particles.size() + inputParticles->size());
  

  for (unsigned int iPtcl = 0; iPtcl < inputParticles->size(); ++iPtcl) {
    const Particle&    particle    = (*inputParticles)[iPtcl];
    if (status >= 0 && particle.status() != status)   continue;
    if (particle.pt()              != particle.pt())  continue;
    if (particle.pt()              <= minInputPT )    continue;
    if (TMath::Abs(particle.eta()) >  maxInputEta)    continue;
    if (select && !(*select)(particle))               continue;
    if (vetoes && (*vetoes)[iPtcl])                   continue;

    particles.push_back(fastjet::PseudoJet( particle.px    () * scale
                                          , particle.py    () * scale
                                          , particle.pz    () * scale
                                          , particle.energy() * scale
                                          ));
    particles.back().set_user_info(new UserInfo(inputParticles, iPtcl,type));
  } // end loop over particles
}


/*************************/
/*      Computations     */
/*************************/

//_____________________________________________________________________________
template<typename Particle, typename Jet>
void FastJetClusterer::distillJets( const edm::Handle<std::vector<Particle> >& inputParticles,const std::vector<fastjet::PseudoJet>& inputJets, std::vector<Jet>& outputJets
                                  , const edm::EventSetup& eventSetup, bool (*select)(const Particle&),bool keepEmptyJets, bool recomputeP4, const reco::Jet::Point& vertex
                                  ) 
{
  outputJets.reserve(inputJets.size());

  for (unsigned int iJet = 0; iJet < inputJets.size(); ++iJet)
  {
    const fastjet::PseudoJet&         inJet         = inputJets[iJet];
    std::vector<fastjet::PseudoJet>   constituents  = inJet.constituents();

    std::vector<reco::CandidatePtr>   daughters;
    reco::Particle::LorentzVector     jetP4;
    if (!recomputeP4)                 jetP4.SetCoordinates(inJet.px(), inJet.py(), inJet.pz(), inJet.E());


    double                            ghostArea     = 0;
    for (unsigned int iCon = 0; iCon < constituents.size(); ++iCon) {
      const fastjet::PseudoJet&       constituent   = constituents[iCon];
      
      if (constituent.has_user_info()) {
        const UserInfo&               info          = constituent.user_info<UserInfo>();
        if (info.key() >= inputParticles->size())   continue;
        const Particle&               particle      = (*inputParticles)[info.key()];
        if (info.get() != &particle)                continue;
        if (select && !(*select)(particle))         continue;
        daughters.push_back(reco::CandidatePtr(inputParticles, info.key()));
        if (recomputeP4)              jetP4        += particle.p4();
      }
      else {
        ////std::cout << currentGhostArea << std::endl;
        ghostArea                    += constituent.has_area()
                                      ? constituent.area()
                                      : currentGhostArea
                                      ;
      }
    } // end loop over constituents


    if (daughters.size() || keepEmptyJets) {
      outputJets.resize   ( outputJets.size() + 1 );

      Jet&                            outJet        = outputJets.back();
      reco::writeSpecific ( outJet, jetP4, vertex, daughters, eventSetup );
      outJet.setJetArea   ( inJet.has_area() ? inJet.area() : ghostArea  );
    }
  } // end loop over outputJets
}


//_____________________________________________________________________________
template<typename Jet>
void FastJetClusterer::selectJets(double minJetPT, double maxJetEta, std::vector<Jet>& satellites)
{
  if (satellites.size() != jets.size())
    throw cms::Exception("FastJetClusterer.selectJets()", "Requested to keep satellites collection in sync, but the initial size is not equal to that of the current jets.");

  for (int iJet = jets.size(); --iJet >= 0;) {
    const fastjet::PseudoJet&           jet   = jets[iJet];
    if (jet.pt() < minJetPT || TMath::Abs(jet.eta()) > maxJetEta) {
      jets      .erase(jets      .begin() + iJet);
      satellites.erase(satellites.begin() + iJet);
    }
  } // end loop over jets
}
}
//_____________________________________________________________________________
namespace {

struct GreaterPT2 {
  bool operator()(const fastjet::PseudoJet* x, const fastjet::PseudoJet* y) const {
    return x->pt2() > y->pt2();
  }
};

struct GreaterM2 {
  bool operator()(const fastjet::PseudoJet* x, const fastjet::PseudoJet* y) const {
    return x->m2() > y->m2();
  }
};

template<typename Field, typename Type, typename Pair = std::pair<Field,Type> >
struct GreaterFirst : public std::binary_function<Pair, Pair, Bool_t> {
  Bool_t operator()(const Pair& t1, const Pair& t2) const { return t1.first > t2.first; }
};
}
namespace ucsbsusy{
//_____________________________________________________________________________
template<typename Spliter>
void FastJetClusterer::pickySubjets ( const Spliter* splitter
                                    , int maxSplits
                                    )
{
  if (!jetDefinition)
    throw cms::Exception("FastJetClusterer.pickySubjets()", "clusterJets() must first be run to obtain an initial jet list.");


  jets.reserve( 2 * jets.size() );
  for (size iJet = 0, numJets = jets.size(); iJet < numJets; ++iJet) {
	if (jets[iJet].pt2() < 1e-10) continue;
    static std::vector<fastjet::PseudoJet*> subClusters;
    static std::vector<int>                 numSplits;
    subClusters .clear();                   subClusters .push_back(new fastjet::PseudoJet(jets[iJet]));
    numSplits   .clear();                   numSplits   .push_back(0);

    int                                     nSubJets    = -1;
    for (int iDe = 0; iDe < int(subClusters.size()); ++iDe) {
      const fastjet::PseudoJet&             superJet    = *subClusters[iDe];

      //-- Try to split up this jet -------------------------------------------
      std::vector<fastjet::PseudoJet*>      subJets;
      const double                          splitMetric = splitter->getSubjets(superJet, subJets);
      if (subJets.size() < 2) {
        if (++nSubJets)                     jets.push_back(superJet);
        else                                jets[iJet]  = superJet;
        PhysicsUtilities::trash(subJets);
        continue;
      }

      //-- Special treatment to discard trivial jets --------------------------
      for (int iSub = subJets.size(); --iSub >= 0;){
        if (subJets[iSub]->pt2() < 1e-10) {
          delete subJets[iSub];
          subJets[iSub]                     = subJets.back();
          subJets.pop_back();
        }
      }

      assert(subJets.size());
      if (subJets.size() < 2) {
        delete subClusters[iDe];
        subClusters[iDe]                    = subJets[0];
        --iDe;                              continue;
      }

      //-- Sorted subjets ---------------------------------------------------------
        static GreaterPT2                   COMPARATOR;
        std::sort(subJets.begin(), subJets.end(), COMPARATOR);

      //-- Split up jets that look deserving ----------------------------------
      if (numSplits[iDe] < maxSplits && splitter->shouldSplit(superJet, subJets, &splitMetric,0)) {
        subClusters .insert( subClusters.end (), subJets.begin(), subJets.end() );
        numSplits   .resize( subClusters.size(), numSplits   [iDe] + 1 );
      }
      //-- Otherwise retain the current piece as a jet ------------------------
      else {
        PhysicsUtilities::trash(subJets);
        if (++nSubJets)                     jets.push_back(superJet);
        else                                jets[iJet]  = superJet;
      }
    } // end loop over jet decompositions

    assert(nSubJets >= 0);
    PhysicsUtilities::trash (subClusters);
  } // end loop over jets

  jets  = fastjet::sorted_by_pt(jets);
}



}




